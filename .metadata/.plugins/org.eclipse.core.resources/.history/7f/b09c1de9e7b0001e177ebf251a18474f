package g_Chapter06;

// 메서드
// : 특정 작업을 수행하는 일련의 문장들을 하나로 묶은 것
// : 어떤 값을 입력하면 해당 값으로 작업을 수행하여 결과를 반환 

// 메서드의 ㅡ구조
// 선언부, 구현부

// 반환타입 메서드명 () 	: 선언부
// { 메서드 호출 시 수행 될 코드 }	: 구현부
// : 메서드를 정의한다 == 선언부와 구현부를 작성한다

//  1. 메서드의 선언부
// '반환타입', '메서드명', '매개변수 선언'

// 매개변수 선언(parameter)
// : 메서드가 작업을 수행하는데 필요한 값들(입력)을 제공받기 위한 것
// : 필요한 값의 개수만큼 변수를 선언하여 각 변수 간의 구분은 쉼표(,)를 사용
// : 변수들의 데이터 타입이 같더라도 변수의 타입을 생략할 수 x
// int add(int x, y) { ... } - Error

// 반환 타입(return type)
// : 메서드의 작업수행 결과(출력)인 반환값의 타입을 명시
// : 반환값이 없는 경우 void 키워드를 사용
class Example{
	// (인스턴스) 변수 선언
	// : 데이터 타입이 같은 경우 변수 타입 생략이 가능
	int x, y;
//	int x;
//	int y;
	
	// add 메서드
	// : 두 개의 정수를 입력 받아서, 두 값을 더한 결과를 반환
	
	// int : 반환타입(출력)
	// add : 메서드명
	// (int x, int y) : 매개변수 선언(입력)
	int add(int x, int y) {
		int result = x + y;
		return result;	// 결과를 반환
	}
	
	// 매개변수x, 반환 값 x
	void print99danA11() {
		for(int i = 1; i <= 9; i++) {
			for(int j = 2 ; j <= 9 ; j++) {
				System.out.print(j*i + " ");
			}
			System.out.println();
		}
	}
	
}
public class Method02 {

	public static void main(String[] args) {
		Example ex1 = new Example();
		ex1.print99danA11();
		
	}

}
